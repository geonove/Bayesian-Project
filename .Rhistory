for ( g in 1: G ) {
y [ Gtrue == g , ] <- rmvnorm ( sum ( Gtrue == g ) , mu [ , g ] , sigma [ , , g ])
}
# # return list with dataset , true component values , mu , sigma and eta
return ( list ( y = y , G = Gtrue , eta = eta , mu = mu , sigma = sigma ) )
}
generate_rand_MultVarNormal(10, 5, 0, 1)
generate_rand_MultVarNormal(10, 1, 0, 1)
N = 10
eta = c(0.35, 0.15, 0.4, 0.2)
mu = c(c(3,3), c(5,2))
mu <- c(c(3,3), c(5,2))
mu
mu <- r(c(3, 5, 9, 8), )
mu <- c(c(3,3))
mu
mu <- c(c(3,3), c(5, 2))
mu
mu <- c(c(3,3), c(5, 2).T)
rcat()
z = sample(1:2, prob = c(0.2, 0.8) size = 100, replace = TRUE)
z = sample(1:2, prob = c(0.2, 0.8), size = 100, replace = TRUE)
z
count(z)
library("dplyr")
count(z)
source("~/Università/Magistrale/2° Anno/1° Semestre/Bayesian statistics/Progetto/bayesian-project/GS_mixture_multi_normals.r", echo=TRUE)
install.packages("Rcpp")
library(gRbase)
library(GLSME)
library(BCDAG)
library(gss)
library(graph)
library(Rcpp)
setwd("C:/Users/andre/Documents/UniversitÃ /Magistrale/2Â° Anno/1Â° Semestre/Bayesian statistics/Progetto/codes")
source("dags/propose_DAG.R")
source("dags/operation.R")
source("dags/acceptreject_DAG.R")
setwd("C:/Users/andre/Documents/UniversitÃ /Magistrale/2Â° Anno/1Â° Semestre/Bayesian statistics/Progetto/codes")
install.packages("installr")
library(installr)
updateR()
library(gRbase)
library(GLSME)
library(BCDAG)
library(gss)
library(graph)
library(Rcpp)
setwd("C:/Users/andre/Documents/Università/Magistrale/2° Anno/1° Semestre/Bayesian statistics/Progetto/codes")
source("dags/propose_DAG.R")
source("dags/operation.R")
source("dags/acceptreject_DAG.R")
source("dags/new_bcdag.R")
source("dags/update_DAG.R")
# PARAMETERS
C <- 4 # number of classes
alpha_0 <- runif(n = C, min = 1, max = 4)
q <- 2
N_SAMPLES <- 200 # number of samples
niter <- 300 # number of Gibbs Sampling iterations
w_real <- gtools::rdirichlet(1, alpha_0)
DAG <- array(dim = c(q, q, C))
Omega <- array(dim = c(q, q, C))
for (i in 1:C) {
DAG[, , i] <- rDAG(q = q, w = 0.5)
L <- matrix(runif(n = q*(q-1), min = 0.1, max = 1), q, q)     ### va bene mettere questi min e max?
L <- L * DAG[, , i]
diag(L) <- 1
D <- diag(1, q)
Omega[, , i] <- L%*%solve(D)%*%t(L)
}
rmix <- function(w_real, Omega) {
z_real <- sample(1:C, prob = w_real, size = N_SAMPLES, replace = TRUE)
x <- matrix(, nrow = N_SAMPLES, ncol = q)
for (i in 1:N_SAMPLES) {
x[i, ] <- mvtnorm::rmvnorm(1, sigma=solve(Omega[, ,z_real[i]]))
}
return(list(x, z_real))
}
mix <- rmix(w_real, Omega)
x <- mix[1]
z_real <- mix[2]
x <- data.frame(x)
z_real <- unlist(z_real)
x11()
plot(x, type="p", col=z_real, pch=20)
# Full conditionals
sample_w <- function(alpha_0, N) {
alpha_new <- alpha_0 + N
w <- gtools::rdirichlet(1, alpha_new)
return(w)
}
sample_z <- function(mu, Omega, w, x) {
z <- array(dim = N_SAMPLES)
for (i in 1:N_SAMPLES) {
prob <- c()
summation <- 0
for (c in 1:C) {
summation <- summation + w[c] * dmvnorm(x[i, ], mu[c, ], solve(Omega[, , c]))
}
# avoid division by 0
if (summation != 0) {
for (c in 1:C) {
prob <- c(prob, w[c] * dmvnorm(x[i, ], mu[c, ], solve(Omega[, , c])) / summation)
}
} else {
prob <- runif(n = C, min = 0, max = 1)
}
z[i] <- sample(1:C, prob = prob, size = 1)
}
return(z)
}
# Gibbs Sampler
gibbs <- function(x, niter, C, alpha_0) {
x <- data.matrix(x)
mu <- matrix(0, nrow = C, ncol = q)
# Hyperparameters
w_dags <- 0.5 # probability of adjacency in dag
# Initialize DAG
DAG <- array(dim = c(q, q, C))
Omega <- array(dim = c(q, q, C))
for (i in 1:C) {
DAG[, , i] <- rDAG(q = q, w = w_dags)
L <- matrix(runif(n = q*(q-1), min = -10, max = 10), q, q)     ### va bene mettere questi min e max?
L <- L * DAG[, , i]
diag(L) <- 1
D <- diag(1, q)
Omega[, , i] <- L%*%solve(D)%*%t(L)
}
# Initialize the Markov Chain
w <- gtools::rdirichlet(1, alpha_0) * 0.01
# Initialize cluster allocation
z <- array(dim = N_SAMPLES)
for (i in 1:N_SAMPLES) {
z[i] <- sample(1:C, prob = w, size = 1)
}
N <- rep(0, C) # Samples per cluster
# Save the Markov Chain
w_GS <- array(dim = c(C, niter) )
w_GS[, 1] <- w
z_GS <- array(dim = c(N_SAMPLES , niter))
z_GS[, 1] <- z
DAG_GS <- array(dim = c(q, q, C, niter))
DAG_GS[, , , 1] <- DAG
Omega_GS <- array(dim = c(q, q, C, niter))
Omega_GS[, , , 1] <- Omega
cat("\nGibbs Sampling\n")
cat(0, "/", niter, "\n")
for (i in 1:niter) {
if (i %% 10 == 0) {
cat(i, "/", niter, "\n")
}
for (c in 1:C) {
N[c] <- sum(z == c)
}
w <- sample_w(alpha_0, N)
z <- sample_z(mu, Omega, w, x)
out <- update_DAGS(DAG = DAG, data = x, z = z, a = q, U=diag(1, q), w = w_dags)
DAG <- out$DAG
#Omega <- out$Omega
w_GS[, i] <- w
z_GS[, i] <- z
DAG_GS[, , , i] <- DAG
Omega_GS[, , , i] <- Omega
}
return(list("w_GS" = w_GS, "z_GS" = z_GS, "DAG_GS" = DAG_GS, "Omega_GS" = Omega_GS))
}
mix <- gibbs(x, 100, C, alpha_0)
# PARAMETERS
C <- 4 # number of classes
alpha_0 <- runif(n = C, min = 1, max = 4)
mu_0 <- 0
tau_0 <- 0.02 # precision
a_0 <- 5
b_0 <- 5
N_SAMPLES <- 2000 # number of samples
niter <- 300 # number of Gibbs Sampling iterations
# Defining the unknown mixture
w_real <- gtools::rdirichlet(1, alpha_0)
mu_real <- rnorm(C, mu_0, sqrt(1 / tau_0))
tau_real <- rgamma(C, shape = a_0, rate = b_0)
cat("w_real :", w_real, "\n")
cat("mu_real :", mu_real, "\n")
cat("tau_real :", tau_real, "\n")
# Sampling from the unknown distribution
rmix <- function(w_real, mu_real, tau_real) {
z <- sample(1:C, prob = w_real, size = N_SAMPLES, replace = TRUE)
x <- rnorm(N_SAMPLES, mu_real[z], sqrt(1 / tau_real[z]))
return(x)
}
x <- rmix(w_real, mu_real, tau_real)
# Plotting
plot_mixture <- function(x_seq, w, mu, tau, title) {
norms <- data.frame(x_seq)
col_names <- c("x_seq")
for (i in 1:C) {
norms <- cbind(norms, dnorm(x_seq, mu[i], sqrt(1 / tau[i])) * w[i])
col_names <- c(col_names, paste("norm", i, sep = ""))
}
norms_matrix <- data.matrix(norms[2:length(norms)])
mixture <- rowSums(norms_matrix)
norms <- cbind(norms, mixture)
col_names <- c(col_names, "mixture")
colnames(norms) <- col_names
library("tidyr")
long_norms <- pivot_longer(norms, cols = all_of(col_names[2:length(col_names)]))
library(ggplot2)
line_sizes <- rep(0.6, C + 1)
line_sizes[1] <- 2
line_colors <- rep(1, C + 1)
line_colors[1] <- 2
ggp <- ggplot(long_norms) +
geom_line(aes(x_seq, value, col = name, size = name)) +
scale_size_manual(values = line_sizes) +
scale_color_manual(values = line_colors) +
ggtitle(title) +
theme(plot.title = element_text(size = 20, face = "bold"))
# x_seq <- data.frame(x_seq)
# ggp <- ggp +
#   geom_histogram(data = x_seq, aes(x_seq = x_seq, y = after_stat(density)), alpha = 0.3,
#                 bins = 300, position = "identity", lwd = 0.2) +
#   ggtitle("Unknown mixture of gaussians + samples")
# ggp <- x_seq[[1]]
x11(type = "cairo")
plot(ggp)
}
x_seq <- seq(min(x), max(x), by = 0.001)
title <- "Unknown mixture of gaussians"
plot_mixture(x_seq, w_real, mu_real, tau_real, title)
# Full conditionals
sample_w <- function(alpha_0, N) {
alpha_new <- alpha_0 + N
w <- gtools::rdirichlet(1, alpha_new)
return(w)
}
sample_tau <- function(mu, z, x, a_0, b_0, N) {
tau <- c()
for (c in 1:C) {
summation <- 0
for (i in 1:N_SAMPLES) {
summation <- summation + z[i, c] * (x[i] - mu[c])^2
}
a_new <- a_0 + N[c] / 2
b_new <- b_0 + summation / 2
tau <- c(tau, rgamma(1, shape = a_new, rate = b_new))
}
return(tau)
}
sample_mu <- function(tau, z, x, tau_0, mu_0, N) {
mu <- c()
for (c in 1:C) {
if (N[c] == 0) {
N[c] <- 1
}
delta <- N[c] * tau[c] / (tau_0 + N[c] * tau[c])
x_bar <- (z[, c] %*% x) / N[c]
mu <- c(mu, rnorm(1, delta * x_bar + (1 - delta) * mu_0, sqrt(1 / (tau_0 + N[c] * tau[c]))))
}
return(mu)
}
sample_z <- function(mu, tau, w, x) {
z <- matrix(, nrow = length(x), ncol = length(w))
for (i in 1:N_SAMPLES) {
prob <- c()
summation <- 0
for (c in 1:C) {
summation <- summation + w[c] * dnorm(x[i], mu[c], sqrt(1 / tau[c]))
}
# avoid division by 0
if (summation != 0) {
for (c in 1:C) {
prob <- c(prob, w[c] * dnorm(x[i], mu[c], sqrt(1 / tau[c])) / summation)
}
} else {
prob <- runif(n = C, min = 0, max = 1)
}
z[i, ] <- rmultinom(1, 1, prob)
}
return(z)
}
# Gibbs Sampler
gibbs <- function(x, niter, C, alpha_0, mu_0, tau_0, a_0, b_0) {
# Initialize the Markov Chain
w <- gtools::rdirichlet(1, alpha_0)
tau <- rgamma(C, shape = a_0, rate = b_0)
mu <- rnorm(C, mu_0, sqrt(1 / tau_0))
z <- matrix(, nrow = length(x), ncol = length(w))
for (i in 1:N_SAMPLES) {
z[i, ] <- rmultinom(1, 1, w)
}
# Save the Markov Chain of mu
mu_GS <- matrix(, nrow = length(x), ncol = length(mu))
mu_GS[1, ] <- mu
cat("\nGibbs Sampling\n")
cat(0, "/", niter, "\n")
for (i in 1:niter) {
if (i %% 50 == 0) {
cat(i, "/", niter, "\n")
}
N <- c()
for (c in 1:C) {
N <- c(N, sum(z[, c]))
}
w <- sample_w(alpha_0, N)
tau <- sample_tau(mu, z, x, a_0, b_0, N)
mu <- sample_mu(tau, z, x, tau_0, mu_0, N)
z <- sample_z(mu, tau, w, x)
mu_GS[i, ] <- mu
}
return(mu_GS)
}
mu_GS <- gibbs(x, niter, C, alpha_0, mu_0, tau_0, a_0, b_0)
x11()
matplot(mu_GS, main="Markov Chain for mu", type = 'l', xlim = c(0, niter), lty = 1, lwd = 2)
mu_real
mu_GS
mu_real
mu_GS[-1, ]
mu_GS[:-1, ]
mu_GS[250, ]
mu_GS[25, ]
mu_GS[251, ]
mu_real
# Gibbs Sampler
gibbs <- function(x, niter, C, alpha_0, mu_0, tau_0, a_0, b_0) {
# Initialize the Markov Chain
w <- gtools::rdirichlet(1, alpha_0)
tau <- rgamma(C, shape = a_0, rate = b_0)
mu <- rnorm(C, mu_0, sqrt(1 / tau_0))
z <- matrix(, nrow = length(x), ncol = length(w))
for (i in 1:N_SAMPLES) {
z[i, ] <- rmultinom(1, 1, w)
}
# Save the Markov Chain of mu
mu_GS <- matrix(, nrow = length(x), ncol = length(mu))
mu_GS[1, ] <- mu
cat("\nGibbs Sampling\n")
cat(0, "/", niter, "\n")
for (i in 1:niter) {
if (i %% 1 == 0) {
cat(i, "/", niter, "\n")
}
N <- c()
for (c in 1:C) {
N <- c(N, sum(z[, c]))
}
w <- sample_w(alpha_0, N)
tau <- sample_tau(mu, z, x, a_0, b_0, N)
mu <- sample_mu(tau, z, x, tau_0, mu_0, N)
z <- sample_z(mu, tau, w, x)
mu_GS[i, ] <- mu
}
return(mu_GS)
}
mu_GS <- gibbs(x, niter, C, alpha_0, mu_0, tau_0, a_0, b_0)
# Gibbs Sampler
gibbs <- function(x, niter, C, alpha_0, mu_0, tau_0, a_0, b_0) {
# Initialize the Markov Chain
w <- gtools::rdirichlet(1, alpha_0)
tau <- rgamma(C, shape = a_0, rate = b_0)
mu <- rnorm(C, mu_0, sqrt(1 / tau_0))
z <- matrix(, nrow = length(x), ncol = length(w))
for (i in 1:N_SAMPLES) {
z[i, ] <- rmultinom(1, 1, w)
}
# Save the Markov Chain of mu
mu_GS <- matrix(, nrow = length(x), ncol = length(mu))
mu_GS[1, ] <- mu
cat("\nGibbs Sampling\n")
cat(0, "/", niter, "\n")
for (i in 1:niter) {
if (i %% 1 == 0) {
cat(i, "/", niter)
}
N <- c()
for (c in 1:C) {
N <- c(N, sum(z[, c]))
}
w <- sample_w(alpha_0, N)
tau <- sample_tau(mu, z, x, a_0, b_0, N)
mu <- sample_mu(tau, z, x, tau_0, mu_0, N)
z <- sample_z(mu, tau, w, x)
mu_GS[i, ] <- mu
}
return(mu_GS)
}
mu_GS <- gibbs(x, niter, C, alpha_0, mu_0, tau_0, a_0, b_0)
# Gibbs Sampler
gibbs <- function(x, niter, C, alpha_0, mu_0, tau_0, a_0, b_0) {
# Initialize the Markov Chain
w <- gtools::rdirichlet(1, alpha_0)
tau <- rgamma(C, shape = a_0, rate = b_0)
mu <- rnorm(C, mu_0, sqrt(1 / tau_0))
z <- matrix(, nrow = length(x), ncol = length(w))
for (i in 1:N_SAMPLES) {
z[i, ] <- rmultinom(1, 1, w)
}
# Save the Markov Chain of mu
mu_GS <- matrix(, nrow = length(x), ncol = length(mu))
mu_GS[1, ] <- mu
cat("\nGibbs Sampling\n")
cat(0, "/", niter, "\n")
for (i in 1:niter) {
if (i %% 1 == 0) {
cat("\r", i, "/", niter)
}
N <- c()
for (c in 1:C) {
N <- c(N, sum(z[, c]))
}
w <- sample_w(alpha_0, N)
tau <- sample_tau(mu, z, x, a_0, b_0, N)
mu <- sample_mu(tau, z, x, tau_0, mu_0, N)
z <- sample_z(mu, tau, w, x)
mu_GS[i, ] <- mu
}
return(mu_GS)
}
mu_GS <- gibbs(x, niter, C, alpha_0, mu_0, tau_0, a_0, b_0)
mu_GS
mu_GS[-1, ]
mu_GS[-2:-1, ]
mu_GS[1]
mu_GS[1,]
mu_GS[1:2,]
mu_GS[-1,]
dim(mu_GS)
# Gibbs Sampler
gibbs <- function(x, niter, C, alpha_0, mu_0, tau_0, a_0, b_0) {
# Initialize the Markov Chain
w <- gtools::rdirichlet(1, alpha_0)
tau <- rgamma(C, shape = a_0, rate = b_0)
mu <- rnorm(C, mu_0, sqrt(1 / tau_0))
z <- matrix(, nrow = length(x), ncol = length(w))
for (i in 1:N_SAMPLES) {
z[i, ] <- rmultinom(1, 1, w)
}
# Save the Markov Chain of mu
mu_GS <- matrix(, nrow = length(x), ncol = length(mu))
mu_GS[1, ] <- mu
cat("\nGibbs Sampling\n")
#cat(0, "/", niter, "\n")
for (i in 1:niter) {
if (i %% 1 == 0) {
cat("\r", i, "/", niter)
}
N <- c()
for (c in 1:C) {
N <- c(N, sum(z[, c]))
}
w <- sample_w(alpha_0, N)
tau <- sample_tau(mu, z, x, a_0, b_0, N)
mu <- sample_mu(tau, z, x, tau_0, mu_0, N)
z <- sample_z(mu, tau, w, x)
mu_GS[i, ] <- mu
}
return(mu_GS)
}
mu_GS <- gibbs(x, niter, C, alpha_0, mu_0, tau_0, a_0, b_0)
# Save the Markov Chain of mu
mu_GS <- matrix(, nrow = niter, ncol = length(mu))
# Gibbs Sampler
gibbs <- function(x, niter, C, alpha_0, mu_0, tau_0, a_0, b_0) {
# Initialize the Markov Chain
w <- gtools::rdirichlet(1, alpha_0)
tau <- rgamma(C, shape = a_0, rate = b_0)
mu <- rnorm(C, mu_0, sqrt(1 / tau_0))
z <- matrix(, nrow = length(x), ncol = length(w))
for (i in 1:N_SAMPLES) {
z[i, ] <- rmultinom(1, 1, w)
}
# Save the Markov Chain of mu
mu_GS <- matrix(, nrow = niter, ncol = length(mu))
mu_GS[1, ] <- mu
cat("\nGibbs Sampling\n")
#cat(0, "/", niter, "\n")
for (i in 1:niter) {
if (i %% 1 == 0) {
cat("\r", i, "/", niter)
}
N <- c()
for (c in 1:C) {
N <- c(N, sum(z[, c]))
}
w <- sample_w(alpha_0, N)
tau <- sample_tau(mu, z, x, a_0, b_0, N)
mu <- sample_mu(tau, z, x, tau_0, mu_0, N)
z <- sample_z(mu, tau, w, x)
mu_GS[i, ] <- mu
}
return(mu_GS)
}
mu_GS <- gibbs(x, niter, C, alpha_0, mu_0, tau_0, a_0, b_0)
dim(mu_GS)
mu_GS
mu_GS[301,]
mu_GS[300,]
apply(mu_GS[250:00, ], 1, "mean")
apply(mu_GS[250:00, ], 4, "mean")
apply(mu_GS[250:300, ], , "mean")
apply(mu_GS[250:300, ], 4, "mean")
sapply(mu_GS[250:300, ], 4, "mean")
sapply(mu_GS[250:300, ], "mean")
sapply(mu_GS[250:300, ], 2,"mean")
sapply(mu_GS[250:300, ], 2,mean)
sapply(mu_GS[250:300, ], 4,mean)
apply(mu_GS[250:300, ], 4,mean)
apply(mu_GS[250:300, ], 2,mean)
sort(apply(mu_GS[250:300, ], 2,mean))
sort(mu_real)
sort(mu_GS[300, ])
sort(apply(mu_GS, 2,mean))
