# Generate random multivariate Gaussian distributed samples
generate _ rand _ MultVarNormal <- function (N , eta , mu , sigma ) {
# ### Parameters of Function ####
# N : size of dataset
# eta : eta values for dataset
# mu : mu values for dataset
# sigma : sigma values for dataset
# ### Return Values of Function ( elements of a list ) ####
# y : dataset
# G : component of each observation ( given )
# eta : used ETA values for drawing ( given )
# mu : used MU values for drawing ( given )
# sigma : used SIGMA values for drawing array :[ , , component _ g ] ( given )
# ### Load Packages ####
library ( " mvtnorm " ) # multivariate Gaussian distribution
# ### Initiation of Variables ####
G <- ncol ( mu ) # Number of Components
D <- nrow ( mu ) # Dimension of dataset
y <- matrix (0 , N , D ) # initiate dataset
colnames ( y ) <- rownames ( mu )
# if same sigma for all , make array
if ( class ( sigma ) ! = " array " ) {
arr <- array (0 , dim = c (D , D , G ) )
for ( g in 1: G ) {
arr [ , , g ] <- sigma
}
sigma <- arr
}
# ### Drawing Values ####
# # draw component for each observation given eta
Gtrue <- sample (1: G , N , replace = TRUE , prob = eta )
# # draw multivariate Gaussian distributed samples
for ( g in 1: G ) {
y [ Gtrue == g , ] <- rmvnorm ( sum ( Gtrue == g ) , mu [ , g ] , sigma [ , , g ])
}
# # return list with dataset , true component values , mu , sigma and eta
return ( list ( y = y , G = Gtrue , eta = eta , mu = mu , sigma = sigma ) )
}
# Generate random multivariate Gaussian distributed samples
generate _ rand _ MultVarNormal <- function (N , eta , mu , sigma ) {
# ### Parameters of Function ####
# N : size of dataset
# eta : eta values for dataset
# mu : mu values for dataset
# sigma : sigma values for dataset
# ### Return Values of Function ( elements of a list ) ####
# y : dataset
# G : component of each observation ( given )
# eta : used ETA values for drawing ( given )
# mu : used MU values for drawing ( given )
# sigma : used SIGMA values for drawing array :[ , , component _ g ] ( given )
# ### Load Packages ####
library ( " mvtnorm " ) # multivariate Gaussian distribution
# ### Initiation of Variables ####
G <- ncol ( mu ) # Number of Components
D <- nrow ( mu ) # Dimension of dataset
y <- matrix (0 , N , D ) # initiate dataset
colnames ( y ) <- rownames ( mu )
# if same sigma for all , make array
if ( class ( sigma ) ! = " array " ) {
arr <- array (0 , dim = c (D , D , G ) )
for ( g in 1: G ) {
arr [ , , g ] <- sigma
}
sigma <- arr
}
# ### Drawing Values ####
# # draw component for each observation given eta
Gtrue <- sample (1: G , N , replace = TRUE , prob = eta )
# # draw multivariate Gaussian distributed samples
for ( g in 1: G ) {
y [ Gtrue == g , ] <- rmvnorm ( sum ( Gtrue == g ) , mu [ , g ] , sigma [ , , g ])
}
# # return list with dataset , true component values , mu , sigma and eta
return ( list ( y = y , G = Gtrue , eta = eta , mu = mu , sigma = sigma ) )
}
clc
clear
clean
clc
clear all
close all
# Generate random multivariate Gaussian distributed samples
generate _ rand _ MultVarNormal <- function (N , eta , mu , sigma ) {
# ### Parameters of Function ####
# N : size of dataset
# eta : eta values for dataset
# mu : mu values for dataset
# sigma : sigma values for dataset
# ### Return Values of Function ( elements of a list ) ####
# y : dataset
# G : component of each observation ( given )
# eta : used ETA values for drawing ( given )
# mu : used MU values for drawing ( given )
# sigma : used SIGMA values for drawing array :[ , , component _ g ] ( given )
# ### Load Packages ####
library ( " mvtnorm " ) # multivariate Gaussian distribution
# ### Initiation of Variables ####
G <- ncol ( mu ) # Number of Components
D <- nrow ( mu ) # Dimension of dataset
y <- matrix (0 , N , D ) # initiate dataset
colnames ( y ) <- rownames ( mu )
# if same sigma for all , make array
if ( class ( sigma ) ! = " array " ) {
arr <- array (0 , dim = c (D , D , G ) )
for ( g in 1: G ) {
arr [ , , g ] <- sigma
}
sigma <- arr
}
# ### Drawing Values ####
# # draw component for each observation given eta
Gtrue <- sample (1: G , N , replace = TRUE , prob = eta )
# # draw multivariate Gaussian distributed samples
for ( g in 1: G ) {
y [ Gtrue == g , ] <- rmvnorm ( sum ( Gtrue == g ) , mu [ , g ] , sigma [ , , g ])
}
# # return list with dataset , true component values , mu , sigma and eta
return ( list ( y = y , G = Gtrue , eta = eta , mu = mu , sigma = sigma ) )
}
# Generate random multivariate Gaussian distributed samples
generate_rand_MultVarNormal <- function (N , eta , mu , sigma ) {
# ### Parameters of Function ####
# N : size of dataset
# eta : eta values for dataset
# mu : mu values for dataset
# sigma : sigma values for dataset
# ### Return Values of Function ( elements of a list ) ####
# y : dataset
# G : component of each observation ( given )
# eta : used ETA values for drawing ( given )
# mu : used MU values for drawing ( given )
# sigma : used SIGMA values for drawing array :[ , , component _ g ] ( given )
# ### Load Packages ####
library ( " mvtnorm " ) # multivariate Gaussian distribution
# ### Initiation of Variables ####
G <- ncol ( mu ) # Number of Components
D <- nrow ( mu ) # Dimension of dataset
y <- matrix (0 , N , D ) # initiate dataset
colnames ( y ) <- rownames ( mu )
# if same sigma for all , make array
if ( class ( sigma ) ! = " array " ) {
arr <- array (0 , dim = c (D , D , G ) )
for ( g in 1: G ) {
arr [ , , g ] <- sigma
}
sigma <- arr
}
# ### Drawing Values ####
# # draw component for each observation given eta
Gtrue <- sample (1: G , N , replace = TRUE , prob = eta )
# # draw multivariate Gaussian distributed samples
for ( g in 1: G ) {
y [ Gtrue == g , ] <- rmvnorm ( sum ( Gtrue == g ) , mu [ , g ] , sigma [ , , g ])
}
# # return list with dataset , true component values , mu , sigma and eta
return ( list ( y = y , G = Gtrue , eta = eta , mu = mu , sigma = sigma ) )
}
# Generate random multivariate Gaussian distributed samples
generate_rand_MultVarNormal <- function (N , eta , mu , sigma ) {
# ### Parameters of Function ####
# N : size of dataset
# eta : eta values for dataset
# mu : mu values for dataset
# sigma : sigma values for dataset
# ### Return Values of Function ( elements of a list ) ####
# y : dataset
# G : component of each observation ( given )
# eta : used ETA values for drawing ( given )
# mu : used MU values for drawing ( given )
# sigma : used SIGMA values for drawing array :[ , , component _ g ] ( given )
# ### Load Packages ####
library ( " mvtnorm " ) # multivariate Gaussian distribution
# ### Initiation of Variables ####
G <- ncol ( mu ) # Number of Components
D <- nrow ( mu ) # Dimension of dataset
y <- matrix (0 , N , D ) # initiate dataset
colnames ( y ) <- rownames ( mu )
# if same sigma for all , make array
if ( class ( sigma ) ! = " array " ) {
arr <- array (0 , dim = c (D , D , G ) )
for ( g in 1: G ) {
arr [ , , g ] <- sigma
}
sigma <- arr
}
# ### Drawing Values ####
# # draw component for each observation given eta
Gtrue <- sample (1: G , N , replace = TRUE , prob = eta )
# # draw multivariate Gaussian distributed samples
for ( g in 1: G ) {
y [ Gtrue == g , ] <- rmvnorm ( sum ( Gtrue == g ) , mu [ , g ] , sigma [ , , g ])
}
# # return list with dataset , true component values , mu , sigma and eta
return ( list ( y = y , G = Gtrue , eta = eta , mu = mu , sigma = sigma ) )
}
# if same sigma for all , make array
if ( class ( sigma ) != " array " ) {
arr <- array (0 , dim = c (D , D , G ) )
for ( g in 1: G ) {
arr [ , , g ] <- sigma
}
sigma <- arr
}
for (g in 1:G) {
arr [ , , g ] <- sigma
}
# Generate random multivariate Gaussian distributed samples
generate_rand_MultVarNormal <- function (N ,eta ,mu ,sigma) {
# ### Parameters of Function ####
# N : size of dataset
# eta : eta values for dataset
# mu : mu values for dataset
# sigma : sigma values for dataset
# ### Return Values of Function ( elements of a list ) ####
# y : dataset
# G : component of each observation ( given )
# eta : used ETA values for drawing ( given )
# mu : used MU values for drawing ( given )
# sigma : used SIGMA values for drawing array :[ , , component _ g ] ( given )
# ### Load Packages ####
library ("mvtnorm") # multivariate Gaussian distribution
# ### Initiation of Variables ####
G <- ncol(mu) # Number of Components
D <- nrow(mu) # Dimension of dataset
y <- matrix(0 ,N , D) # initiate dataset
colnames(y) <- rownames (mu)
# if same sigma for all , make array
if (class(sigma) != "array") {
arr <- array (0, dim = c (D, D, G))
for (g in 1:G) {
arr [ , , g ] <- sigma
}
sigma <- arr
}
# ### Drawing Values ####
# # draw component for each observation given eta
Gtrue <- sample (1: G , N , replace = TRUE , prob = eta )
# # draw multivariate Gaussian distributed samples
for ( g in 1: G ) {
y [ Gtrue == g , ] <- rmvnorm ( sum ( Gtrue == g ) , mu [ , g ] , sigma [ , , g ])
}
# # return list with dataset , true component values , mu , sigma and eta
return ( list ( y = y , G = Gtrue , eta = eta , mu = mu , sigma = sigma ) )
}
generate_rand_MultVarNormal(1, 5, 0, 1)
install.packages("mvtnorm")
install.packages("mvtnorm")
generate_rand_MultVarNormal(1, 5, 0, 1)
generate_rand_MultVarNormal(10, 5, 0, 1)
generate_rand_MultVarNormal(10, c(0,0), c(c(1,0), c(0,1)), 1)
# Generate random multivariate Gaussian distributed samples
generate_rand_MultVarNormal <- function (N ,eta ,mu ,sigma) {
# ### Parameters of Function ####
# N : size of dataset
# eta : eta values for dataset
# mu : mu values for dataset
# sigma : sigma values for dataset
# ### Return Values of Function ( elements of a list ) ####
# y : dataset
# G : component of each observation ( given )
# eta : used ETA values for drawing ( given )
# mu : used MU values for drawing ( given )
# sigma : used SIGMA values for drawing array :[ , , component _ g ] ( given )
# ### Load Packages ####
library ("mvtnorm") # multivariate Gaussian distribution
# ### Initiation of Variables ####
G <- ncol(mu) # Number of Components
D <- nrow(mu) # Dimension of dataset
y <- matrix(0 ,N ,D) # initiate dataset
colnames(y) <- rownames (mu)
# if same sigma for all , make array
if (class(sigma) != "array") {
arr <- array (0, dim = c (D, D, G))
for (g in 1:G) {
arr [ , , g ] <- sigma
}
sigma <- arr
}
# ### Drawing Values ####
# # draw component for each observation given eta
Gtrue <- sample (1: G , N , replace = TRUE , prob = eta )
# # draw multivariate Gaussian distributed samples
for ( g in 1: G ) {
y [ Gtrue == g , ] <- rmvnorm ( sum ( Gtrue == g ) , mu [ , g ] , sigma [ , , g ])
}
# # return list with dataset , true component values , mu , sigma and eta
return ( list ( y = y , G = Gtrue , eta = eta , mu = mu , sigma = sigma ) )
}
generate_rand_MultVarNormal(10, 5, 0, 1)
generate_rand_MultVarNormal(10, 1, 0, 1)
N = 10
eta = c(0.35, 0.15, 0.4, 0.2)
mu = c(c(3,3), c(5,2))
mu <- c(c(3,3), c(5,2))
mu
mu <- r(c(3, 5, 9, 8), )
mu <- c(c(3,3))
mu
mu <- c(c(3,3), c(5, 2))
mu
mu <- c(c(3,3), c(5, 2).T)
setwd("C:/Users/andre/Documents/Università/Magistrale/2° Anno/1° Semestre/Bayesian statistics/Progetto/codes")
rm(list = ls())
graphics.off()
library(ggplot2)
library(extraDistr)
library(plyr)
library(mvtnorm)
library(plot3D)
set.seed(1)
nsamples <- 1000
mu1 <- c(3, 3)
sigma1 <- cbind(c(1, 0.5), c(0.5, 1))
w1 <- 0.35
n1 <- as.integer(nsamples * w1)
cluster1 <- rmvnorm(n1, mu1, sigma1)
mu2 <- c(5, 2)
sigma2 <- cbind(c(0.4, -0.2), c(-0.2, 0.2))
w2 <- 0.15
n2 <- as.integer(nsamples * w2)
cluster2 <- rmvnorm(n2, mu2, sigma2)
mu3 <- c(9, 4)
sigma3 <- cbind(c(1.0, 0.0), c(0.0, 1.0))
w3 <- 0.3
n3 <- as.integer(nsamples * w3)
cluster3 <- rmvnorm(n3, mu3, sigma3)
mu4 <- c(8, 6)
sigma4 <- cbind(c(0.1, 0.0), c(0.0, 0.1))
w4 <- 0.2
n4 <- as.integer(nsamples * w4)
cluster4 <- rmvnorm(n4, mu4, sigma4)
data <- rbind(cluster1, cluster2, cluster3, cluster4)
groups <- c(rep(1, n1), rep(2, n2), rep(3, n3), rep(4, n4))
x11()
plot(data, type="p", col=groups, pch=20)
#legend("bottomright", legend=c("cluster1", "cluster2", "cluster3", "cluster4"), col=c(1,2,3,4))
graphics.off()
x <- seq(0, 12, 0.1)
y <- seq(0, 12, 0.1)
f <- function(x, y) w1 * dmvnorm(cbind(x, y), mu1, sigma1) +
w2 * dmvnorm(cbind(x, y), mu2, sigma2) +
w3 * dmvnorm(cbind(x, y), mu3, sigma3) +
w4 * dmvnorm(cbind(x, y), mu4, sigma4)
z <- outer(x, y, f)
x11()
persp3D(x, y, z, theta = 45, phi = 30,
shade = 0.75, expand = 0.5, r = 2,
ltheta = 25, ticktype = "detailed")
graphics.off()
x11()
plot(data, type="p", pch=20, col="blue")
graphics.off()
Gibbs_Sampler <- function(data, nclus, niter, burnin) {
p <- dim(data)[-1]
n <- dim(data)[1]
alpha <- rep(1, nclus) * 0.01
weights <- rep(1, nclus) / nclus
cluster_allocs <- rcat(n, weights)
cluster_allocs_out <- list()
mu_out <- list()
sigma_out <- list()
weights_out <- list()
b0 <- apply(data, p, median)
B0 <- diag((apply(data, p, max) - apply(data, p, min))**2)
B0_inv <- solve(B0)
mu0 <- rmvnorm(nclus, b0, B0)
c0 <- 2.5 + 0.5 * (p - 1)
phi <- 1
C0 <- phi * cov(data)
sigma0_inv <- rWishart(nclus, c0, solve(C0))
print(sigma0_inv)
cluster_allocs_out <- append(cluster_allocs_out, cluster_allocs)
mu_out[[1]] <- mu0
sigma_out <- append(sigma_out, sigma0_inv)
weights_out <- append(weights_out, weights)
for (i in 1:niter) {
#cat("\rIter ",i, "/", niter)
n_in_clus <- count(cluster_allocs)$freq
weights <- rdirichlet(1, alpha + n_in_clus)
mu_iter <- list()
sigma_iter <- list()
for (j in 1:nclus) {
clusdata <- data[cluster_allocs, ]
if (dim(clusdata)[1] == 0)
clusmean <- rep(0, p)
else
clusmean <- apply(clusdata, p, mean)
mu_clus <- c(mu_out[[i]][j, ])
c_clus <- c0 + 0.5 * dim(clusdata)[1]
C_clus <- C0 + 0.5 * t(sweep(clusdata, p, mu_clus)) %*% (sweep(clusdata, p, mu_clus))
sigma_clus_inv <- rWishart(1, c_clus, solve(C_clus))
B_clus <- solve(B0_inv + dim(clusdata)[1] * sigma_clus_inv)
b_clus <- B_clus %*% (B0_inv %*% b0 + dim(clusdata)[1] * sigma_clus_inv %*% clusmean)
}
}
}
mu_clus <- apply(data, p, mean)
c_clus <- c0 + 0.5 * dim(data)[1]
C_clus <- C0 + 0.5 * t(sweep(data, p, mu_clus)) %*% (sweep(data, p, mu_clus))
sigma_clus_inv <- rWishart(1, c_clus, solve(C_clus))
P = 2
c0 <- 2.5 + 0.5 * (p - 1)
phi <- 1
C0 <- phi * cov(data)
mu_clus <- apply(data, p, mean)
p = 2
c0 <- 2.5 + 0.5 * (p - 1)
phi <- 1
C0 <- phi * cov(data)
sigma0_inv <- rWishart(nclus, c0, solve(C0))
mu_clus <- apply(data, p, mean)
c_clus <- c0 + 0.5 * dim(data)[1]
C_clus <- C0 + 0.5 * t(sweep(data, p, mu_clus)) %*% (sweep(data, p, mu_clus))
sigma_clus_inv <- rWishart(1, c_clus, solve(C_clus))
sigma_clus_inv
A = sigma_clus_inv
B = A
C = c(A, B)
C
dim(sigma_clus_inv)
sigma_clus_inv[1]
sigma_clus_inv[1,]
sigma_clus_inv[1][1]
sigma_clus_inv[1][2]
as.matrix(sigma_clus_inv)
sigma_clus_inv[1,:]
sigma_clus_inv[1:]
mu
mu_clus
mu_clus[1]
mu_clus[]
C_clus
C_clus[1,:]
C_clus[1,]
C_clus[,1]
sigma_clus_inv
View(f)
View(sigma2)
as.data.frame(sigma_clus_inv)
A = as.data.frame(sigma_clus_inv)
B = A
C = c(A, B)
C
View(C)
C = data.frame(A, B)
C
sigma_out[3,1]
C[1,3]
