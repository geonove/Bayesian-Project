# PARAMETERS
C <- 4 # number of classes
alpha_0 <- runif(n = C, min = 1, max = 4)
mu_0 <- 0
tau_0 <- 0.02 # precision
a_0 <- 5
b_0 <- 5
N_SAMPLES <- 2000 # number of samples
niter <- 300 # number of Gibbs Sampling iterations
# Defining the unknown mixture
w_real <- gtools::rdirichlet(1, alpha_0)
mu_real <- rnorm(C, mu_0, sqrt(1 / tau_0))
tau_real <- rgamma(C, shape = a_0, rate = b_0)
cat("w_real :", w_real, "\n")
cat("mu_real :", mu_real, "\n")
cat("tau_real :", tau_real, "\n")
# Sampling from the unknown distribution
rmix <- function(w_real, mu_real, tau_real) {
z <- sample(1:C, prob = w_real, size = N_SAMPLES, replace = TRUE)
x <- rnorm(N_SAMPLES, mu_real[z], sqrt(1 / tau_real[z]))
return(x)
}
x <- rmix(w_real, mu_real, tau_real)
# Plotting
plot_mixture <- function(x_seq, w, mu, tau, title) {
norms <- data.frame(x_seq)
col_names <- c("x_seq")
for (i in 1:C) {
norms <- cbind(norms, dnorm(x_seq, mu[i], sqrt(1 / tau[i])) * w[i])
col_names <- c(col_names, paste("norm", i, sep = ""))
}
norms_matrix <- data.matrix(norms[2:length(norms)])
mixture <- rowSums(norms_matrix)
norms <- cbind(norms, mixture)
col_names <- c(col_names, "mixture")
colnames(norms) <- col_names
library("tidyr")
long_norms <- pivot_longer(norms, cols = all_of(col_names[2:length(col_names)]))
library(ggplot2)
line_sizes <- rep(0.6, C + 1)
line_sizes[1] <- 2
line_colors <- rep(1, C + 1)
line_colors[1] <- 2
ggp <- ggplot(long_norms) +
geom_line(aes(x_seq, value, col = name, size = name)) +
scale_size_manual(values = line_sizes) +
scale_color_manual(values = line_colors) +
ggtitle(title) +
theme(plot.title = element_text(size = 20, face = "bold"))
# x_seq <- data.frame(x_seq)
# ggp <- ggp +
#   geom_histogram(data = x_seq, aes(x_seq = x_seq, y = after_stat(density)), alpha = 0.3,
#                 bins = 300, position = "identity", lwd = 0.2) +
#   ggtitle("Unknown mixture of gaussians + samples")
# ggp <- x_seq[[1]]
x11(type = "cairo")
plot(ggp)
}
x_seq <- seq(min(x), max(x), by = 0.001)
title <- "Unknown mixture of gaussians"
plot_mixture(x_seq, w_real, mu_real, tau_real, title)
source("~/Università/Magistrale/2° Anno/1° Semestre/Bayesian statistics/Progetto/codes/gibbs/GS_mixture_univ_normals.r", echo=TRUE)
source("~/Università/Magistrale/2° Anno/1° Semestre/Bayesian statistics/Progetto/codes/gibbs/GS_mixture_univ_normals.r", echo=TRUE)
source("~/Università/Magistrale/2° Anno/1° Semestre/Bayesian statistics/Progetto/codes/gibbs/GS_mixture_univ_normals.r", echo=TRUE)
source("~/Università/Magistrale/2° Anno/1° Semestre/Bayesian statistics/Progetto/codes/gibbs/GS_mixture_univ_normals.r", echo=TRUE)
source("~/Università/Magistrale/2° Anno/1° Semestre/Bayesian statistics/Progetto/codes/gibbs/GS_mixture_univ_normals.r", echo=TRUE)
source("~/Università/Magistrale/2° Anno/1° Semestre/Bayesian statistics/Progetto/codes/gibbs/GS_mixture_univ_normals.r", echo=TRUE)
source("~/Università/Magistrale/2° Anno/1° Semestre/Bayesian statistics/Progetto/codes/gibbs/GS_mixture_univ_normals.r", echo=TRUE)
source("~/Università/Magistrale/2° Anno/1° Semestre/Bayesian statistics/Progetto/codes/gibbs/GS_mixture_univ_normals.r", echo=TRUE)
source("~/Università/Magistrale/2° Anno/1° Semestre/Bayesian statistics/Progetto/codes/gibbs/GS_mixture_univ_normals.r", echo=TRUE)
rmultinom(2, 2, c(0.5, 0.5))
rmultinom(2, 1, c(0.5, 0.5))
rmultinom(1, 2, c(0.5, 0.5))
z
z_real
rmultinom(10, 4, c(0.5, 0.5))
source("~/Università/Magistrale/2° Anno/1° Semestre/Bayesian statistics/Progetto/codes/gibbs/GS_mixture_univ_normals.r", echo=TRUE)
source("~/Università/Magistrale/2° Anno/1° Semestre/Bayesian statistics/Progetto/codes/gibbs/GS_mixture_univ_normals.r", echo=TRUE)
warings()
warnings()
sample_z <- function(mu, tau, w, x) {
z <- matrix(, nrow = length(x), ncol = length(w))
for (i in 1:N_SAMPLES) {
prob <- c()
summation <- 0
for (c in 1:C) {
summation <- summation + w[c] * dnorm(x[i], mu[c], sqrt(1 / tau[c]))
}
# avoid division by 0
if (summation != 0) {
for (c in 1:C) {
prob <- c(prob, w[c] * dnorm(x[i], mu[c], sqrt(1 / tau[c])) / summation)
}
} else {
prob <- runif(n = C, min = 0, max = 1)
}
z[i, ] <- rmultinom(1, 1, prob)
}
return(z)
}
sample_z(mu_0, tau_0, w, x)
sample_z(mu_0, tau_0, w_real, x)
sample_z(mu_real, tau_real, w_real, x)
sample_z <- function(mu, tau, w, x) {
z <- matrix(, nrow = length(x), ncol = length(w))
prob <- numeric(N_SAMPLES)
for (c in 1:C) {
summation <-  sum(w[c] * dnorm(x, mu[c], sqrt(1 / tau[c])))
if (summation != 0) {
prob[c] <- w[c] * dnorm(x, mu[c], sqrt(1 / tau[c])) / summation
}
else {
prob[c] <- runif(n = C, min = 0, max = 1)
}
}
z <- rmultinom(C, N_SAMPLES, prob)
}
sample_z(mu_real, tau_real, w_real, x)
sample_z <- function(mu, tau, w, x) {
z <- matrix(, nrow = length(x), ncol = length(w))
for (i in 1:N_SAMPLES) {
prob <- c()
summation <- 0
for (c in 1:C) {
summation <- summation + w[c] * dnorm(x[i], mu[c], sqrt(1 / tau[c]))
}
print(summation)
# avoid division by 0
if (summation != 0) {
for (c in 1:C) {
prob <- c(prob, w[c] * dnorm(x[i], mu[c], sqrt(1 / tau[c])) / summation)
}
} else {
prob <- runif(n = C, min = 0, max = 1)
}
z[i, ] <- rmultinom(1, 1, prob)
}
return(z)
}
sample_z(mu_real, tau_real, w_real, x)
